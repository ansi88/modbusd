<?xml version='1.0' encoding='utf-8'?>
<struct id="cJSON" name="cJSON" typedef="yes" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief>The cJSON structure:</brief>
  <field id="cJSON::next" name="next">
    <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
  </field>
  <field id="cJSON::prev" name="prev">
    <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
  </field>
  <field id="cJSON::child" name="child">
    <brief>next/prev allow you to walk array/object chains. Alternatively, use GetArraySize/GetArrayItem/GetObjectItem</brief>
    <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
  </field>
  <field id="cJSON::type" name="type">
    <brief>An array or object item will have a child pointer pointing to a chain of the items in the array/object.</brief>
    <type builtin="yes" name="int" />
  </field>
  <field id="cJSON::valuestring" name="valuestring">
    <brief>The type of the item, as above.</brief>
    <type builtin="yes" name="char" qualifier="*" />
  </field>
  <field id="cJSON::valueuint8" name="valueuint8">
    <brief>taka add</brief>
    <type name="uint8_t" />
  </field>
  <field id="cJSON::valueuint16" name="valueuint16">
    <type name="uint16_t" />
  </field>
  <field id="cJSON::valueint" name="valueint">
    <type builtin="yes" name="int" />
  </field>
  <field id="cJSON::valuedouble" name="valuedouble">
    <brief>The item's number, if type==cJSON_Number</brief>
    <type builtin="yes" name="double" />
  </field>
  <field id="cJSON::string" name="string">
    <brief>The item's number, if type==cJSON_Number</brief>
    <type builtin="yes" name="char" qualifier="*" />
  </field>
  <function id="cJSON_AddItemReferenceToArray" name="cJSON_AddItemReferenceToArray">
    <brief>Use this when string is definitely const (i.e. a literal, or as good as), and will definitely survive the cJSON object</brief>
    <doc>Append reference to item to the specified array/object. Use this when you want to add an existing cJSON to a new cJSON, but don't want to corrupt your existing cJSON.</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cJSON_AddItemReferenceToArray::array" name="array">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
    <argument id="cJSON_AddItemReferenceToArray::item" name="item">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
  </function>
  <function id="cJSON_AddItemReferenceToObject" name="cJSON_AddItemReferenceToObject">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cJSON_AddItemReferenceToObject::object" name="object">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
    <argument id="cJSON_AddItemReferenceToObject::string" name="string">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
    <argument id="cJSON_AddItemReferenceToObject::item" name="item">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
  </function>
  <function id="cJSON_AddItemToArray" name="cJSON_AddItemToArray">
    <brief>Append item to the specified array/object.</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cJSON_AddItemToArray::array" name="array">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
    <argument id="cJSON_AddItemToArray::item" name="item">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
  </function>
  <function id="cJSON_AddItemToObject" name="cJSON_AddItemToObject">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cJSON_AddItemToObject::object" name="object">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
    <argument id="cJSON_AddItemToObject::string" name="string">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
    <argument id="cJSON_AddItemToObject::item" name="item">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
  </function>
  <function id="cJSON_AddItemToObjectCS" name="cJSON_AddItemToObjectCS">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cJSON_AddItemToObjectCS::object" name="object">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
    <argument id="cJSON_AddItemToObjectCS::string" name="string">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
    <argument id="cJSON_AddItemToObjectCS::item" name="item">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
  </function>
  <function id="cJSON_Delete" name="cJSON_Delete">
    <brief>Delete a cJSON entity and all subentities.</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cJSON_Delete::c" name="c">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
  </function>
  <function id="cJSON_DeleteItemFromArray" name="cJSON_DeleteItemFromArray">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cJSON_DeleteItemFromArray::array" name="array">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
    <argument id="cJSON_DeleteItemFromArray::which" name="which">
      <type builtin="yes" name="int" />
    </argument>
  </function>
  <function id="cJSON_DeleteItemFromObject" name="cJSON_DeleteItemFromObject">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cJSON_DeleteItemFromObject::object" name="object">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
    <argument id="cJSON_DeleteItemFromObject::string" name="string">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
  </function>
  <function id="cJSON_DetachItemFromArray" name="cJSON_DetachItemFromArray">
    <brief>Remove/Detatch items from Arrays/Objects.</brief>
    <return>
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </return>
    <argument id="cJSON_DetachItemFromArray::array" name="array">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
    <argument id="cJSON_DetachItemFromArray::which" name="which">
      <type builtin="yes" name="int" />
    </argument>
  </function>
  <function id="cJSON_DetachItemFromObject" name="cJSON_DetachItemFromObject">
    <return>
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </return>
    <argument id="cJSON_DetachItemFromObject::object" name="object">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
    <argument id="cJSON_DetachItemFromObject::string" name="string">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
  </function>
  <function id="cJSON_Duplicate" name="cJSON_Duplicate">
    <brief>Duplicate a cJSON item</brief>
    <return>
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </return>
    <argument id="cJSON_Duplicate::item" name="item">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
    <argument id="cJSON_Duplicate::recurse" name="recurse">
      <type builtin="yes" name="int" />
    </argument>
  </function>
  <function id="cJSON_GetArrayItem" name="cJSON_GetArrayItem">
    <brief>Retrieve item number "item" from array "array". Returns NULL if unsuccessful.</brief>
    <return>
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </return>
    <argument id="cJSON_GetArrayItem::array" name="array">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
    <argument id="cJSON_GetArrayItem::item" name="item">
      <type builtin="yes" name="int" />
    </argument>
  </function>
  <function id="cJSON_GetArraySize" name="cJSON_GetArraySize">
    <brief>Returns the number of items in an array (or object).</brief>
    <return>
      <type builtin="yes" name="int" />
    </return>
    <argument id="cJSON_GetArraySize::array" name="array">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
  </function>
  <function id="cJSON_GetObjectItem" name="cJSON_GetObjectItem">
    <brief>Get item "string" from object. Case insensitive.</brief>
    <return>
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </return>
    <argument id="cJSON_GetObjectItem::object" name="object">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
    <argument id="cJSON_GetObjectItem::string" name="string">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
  </function>
  <function id="cJSON_HasObjectItem" name="cJSON_HasObjectItem">
    <return>
      <type builtin="yes" name="int" />
    </return>
    <argument id="cJSON_HasObjectItem::object" name="object">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
    <argument id="cJSON_HasObjectItem::string" name="string">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
  </function>
  <function id="cJSON_InsertItemInArray" name="cJSON_InsertItemInArray">
    <brief>Update array items.</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cJSON_InsertItemInArray::array" name="array">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
    <argument id="cJSON_InsertItemInArray::which" name="which">
      <type builtin="yes" name="int" />
    </argument>
    <argument id="cJSON_InsertItemInArray::newitem" name="newitem">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
  </function>
  <function id="cJSON_Print" name="cJSON_Print">
    <brief>Render a cJSON entity to text for transfer/storage. Free the char* when finished.</brief>
    <return>
      <type builtin="yes" name="char" qualifier="*" />
    </return>
    <argument id="cJSON_Print::item" name="item">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
  </function>
  <function id="cJSON_PrintBuffered" name="cJSON_PrintBuffered">
    <brief>Render a cJSON entity to text using a buffered strategy. prebuffer is a guess at the final size. guessing well reduces reallocation. fmt=0 gives unformatted, =1 gives formatted</brief>
    <return>
      <type builtin="yes" name="char" qualifier="*" />
    </return>
    <argument id="cJSON_PrintBuffered::item" name="item">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
    <argument id="cJSON_PrintBuffered::prebuffer" name="prebuffer">
      <type builtin="yes" name="int" />
    </argument>
    <argument id="cJSON_PrintBuffered::fmt" name="fmt">
      <type builtin="yes" name="int" />
    </argument>
  </function>
  <function id="cJSON_PrintUnformatted" name="cJSON_PrintUnformatted">
    <brief>Render a cJSON entity to text for transfer/storage without any formatting. Free the char* when finished.</brief>
    <return>
      <type builtin="yes" name="char" qualifier="*" />
    </return>
    <argument id="cJSON_PrintUnformatted::item" name="item">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
  </function>
  <function id="cJSON_ReplaceItemInArray" name="cJSON_ReplaceItemInArray">
    <brief>Shifts pre-existing items to the right.</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cJSON_ReplaceItemInArray::array" name="array">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
    <argument id="cJSON_ReplaceItemInArray::which" name="which">
      <type builtin="yes" name="int" />
    </argument>
    <argument id="cJSON_ReplaceItemInArray::newitem" name="newitem">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
  </function>
  <function id="cJSON_ReplaceItemInObject" name="cJSON_ReplaceItemInObject">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cJSON_ReplaceItemInObject::object" name="object">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
    <argument id="cJSON_ReplaceItemInObject::string" name="string">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
    <argument id="cJSON_ReplaceItemInObject::newitem" name="newitem">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
  </function>
</struct>
