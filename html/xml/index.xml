<?xml version='1.0' encoding='utf-8'?>
<index xmlns="http://jessevdk.github.com/cldoc/1.0">
  <variable id="cstr" name="cstr">
    <type class="array" size="256">
      <type builtin="yes" name="char" />
    </type>
  </variable>
  <struct name="cJSON" ref="cJSON#cJSON">
    <brief>The cJSON structure:</brief>
  </struct>
  <struct name="cJSON_Hooks" ref="cJSON_Hooks#cJSON_Hooks" />
  <struct name="mbtcp_handle_s" ref="mbtcp_handle_s#mbtcp_handle_s">
    <brief>*</brief>
  </struct>
  <struct name="mbtcp_key_s" ref="mbtcp_key_s#mbtcp_key_s">
    <brief>*</brief>
  </struct>
  <struct name="UT_hash_bucket" ref="UT_hash_bucket#UT_hash_bucket" />
  <struct name="UT_hash_handle" ref="UT_hash_handle#UT_hash_handle" />
  <struct name="UT_hash_table" ref="UT_hash_table#UT_hash_table" />
  <typedef id="mbtcp_fc" name="mbtcp_fc">
    <brief>*</brief>
    <doc>Function pointer to `modbus tcp function code request` for `generic command handle`.

</doc>
    <type class="function" qualifier="*">
      <result>
        <type builtin="yes" name="char" qualifier="*" />
      </result>
      <arguments>
        <type name="mbtcp_handle_s" qualifier="*" ref="mbtcp_handle_s#mbtcp_handle_s" />
        <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
      </arguments>
    </type>
  </typedef>
  <function id="cJSON_CreateArray" name="cJSON_CreateArray">
    <return>
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </return>
  </function>
  <function id="cJSON_CreateBool" name="cJSON_CreateBool">
    <return>
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </return>
    <argument id="cJSON_CreateBool::b" name="b">
      <type builtin="yes" name="int" />
    </argument>
  </function>
  <function id="cJSON_CreateDoubleArray" name="cJSON_CreateDoubleArray">
    <return>
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </return>
    <argument id="cJSON_CreateDoubleArray::numbers" name="numbers">
      <type builtin="yes" name="double" qualifier=" const *" />
    </argument>
    <argument id="cJSON_CreateDoubleArray::count" name="count">
      <type builtin="yes" name="int" />
    </argument>
  </function>
  <function id="cJSON_CreateFalse" name="cJSON_CreateFalse">
    <return>
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </return>
  </function>
  <function id="cJSON_CreateFloatArray" name="cJSON_CreateFloatArray">
    <return>
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </return>
    <argument id="cJSON_CreateFloatArray::numbers" name="numbers">
      <type builtin="yes" name="float" qualifier=" const *" />
    </argument>
    <argument id="cJSON_CreateFloatArray::count" name="count">
      <type builtin="yes" name="int" />
    </argument>
  </function>
  <function id="cJSON_CreateIntArray" name="cJSON_CreateIntArray">
    <return>
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </return>
    <argument id="cJSON_CreateIntArray::numbers" name="numbers">
      <type builtin="yes" name="int" qualifier=" const *" />
    </argument>
    <argument id="cJSON_CreateIntArray::count" name="count">
      <type builtin="yes" name="int" />
    </argument>
  </function>
  <function id="cJSON_CreateNull" name="cJSON_CreateNull">
    <brief>These calls create a cJSON item of the appropriate type.</brief>
    <return>
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </return>
  </function>
  <function id="cJSON_CreateNumber" name="cJSON_CreateNumber">
    <return>
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </return>
    <argument id="cJSON_CreateNumber::num" name="num">
      <type builtin="yes" name="double" />
    </argument>
  </function>
  <function id="cJSON_CreateObject" name="cJSON_CreateObject">
    <return>
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </return>
  </function>
  <function id="cJSON_CreateString" name="cJSON_CreateString">
    <return>
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </return>
    <argument id="cJSON_CreateString::string" name="string">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
  </function>
  <function id="cJSON_CreateStringArray" name="cJSON_CreateStringArray">
    <return>
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </return>
    <argument id="cJSON_CreateStringArray::strings" name="strings">
      <type builtin="yes" name="char" qualifier=" const **" />
    </argument>
    <argument id="cJSON_CreateStringArray::count" name="count">
      <type builtin="yes" name="int" />
    </argument>
  </function>
  <function id="cJSON_CreateTrue" name="cJSON_CreateTrue">
    <return>
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </return>
  </function>
  <function id="cJSON_CreateUInt8Array" name="cJSON_CreateUInt8Array">
    <brief>These utilities create an Array of count items.</brief>
    <doc>taka add</doc>
    <return>
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </return>
    <argument id="cJSON_CreateUInt8Array::numbers" name="numbers">
      <type name="uint8_t" qualifier=" const *" />
    </argument>
    <argument id="cJSON_CreateUInt8Array::count" name="count">
      <type builtin="yes" name="int" />
    </argument>
  </function>
  <function id="cJSON_CreateUInt16Array" name="cJSON_CreateUInt16Array">
    <return>
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </return>
    <argument id="cJSON_CreateUInt16Array::numbers" name="numbers">
      <type name="uint16_t" qualifier=" const *" />
    </argument>
    <argument id="cJSON_CreateUInt16Array::count" name="count">
      <type builtin="yes" name="int" />
    </argument>
  </function>
  <function id="cJSON_GetErrorPtr" name="cJSON_GetErrorPtr">
    <brief>For analysing failed parses. This returns a pointer to the parse error. You'll probably need to look a few chars back to make sense of it. Defined when cJSON_Parse() returns 0. 0 when cJSON_Parse() succeeds.</brief>
    <return>
      <type builtin="yes" name="char" qualifier=" const *" />
    </return>
  </function>
  <function id="cJSON_Minify" name="cJSON_Minify">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cJSON_Minify::json" name="json">
      <type builtin="yes" name="char" qualifier="*" />
    </argument>
  </function>
  <function id="cJSON_Parse" name="cJSON_Parse">
    <brief>Supply a block of JSON, and this returns a cJSON object you can interrogate. Call cJSON_Delete when finished.</brief>
    <return>
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </return>
    <argument id="cJSON_Parse::value" name="value">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
  </function>
  <function id="cJSON_ParseWithOpts" name="cJSON_ParseWithOpts">
    <brief>ParseWithOpts allows you to require (and check) that the JSON is null terminated, and to retrieve the pointer to the final byte parsed.</brief>
    <doc>If you supply a ptr in return_parse_end and parsing fails, then return_parse_end will contain a pointer to the error. If not, then cJSON_GetErrorPtr() does the job.</doc>
    <return>
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </return>
    <argument id="cJSON_ParseWithOpts::value" name="value">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
    <argument id="cJSON_ParseWithOpts::return_parse_end" name="return_parse_end">
      <type builtin="yes" name="char" qualifier=" const **" />
    </argument>
    <argument id="cJSON_ParseWithOpts::require_null_terminated" name="require_null_terminated">
      <type builtin="yes" name="int" />
    </argument>
  </function>
  <function id="cJSONUtils_AddPatchToArray" name="cJSONUtils_AddPatchToArray">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cJSONUtils_AddPatchToArray::array" name="array">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
    <argument id="cJSONUtils_AddPatchToArray::op" name="op">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
    <argument id="cJSONUtils_AddPatchToArray::path" name="path">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
    <argument id="cJSONUtils_AddPatchToArray::val" name="val">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
  </function>
  <function id="cJSONUtils_ApplyPatches" name="cJSONUtils_ApplyPatches">
    <brief>Utility for generating patch array entries.</brief>
    <return>
      <type builtin="yes" name="int" />
    </return>
    <argument id="cJSONUtils_ApplyPatches::object" name="object">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
    <argument id="cJSONUtils_ApplyPatches::patches" name="patches">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
  </function>
  <function id="cJSONUtils_FindPointerFromObjectTo" name="cJSONUtils_FindPointerFromObjectTo">
    <brief>generates a patch to move from -&gt; to</brief>
    <return>
      <type builtin="yes" name="char" qualifier="*" />
    </return>
    <argument id="cJSONUtils_FindPointerFromObjectTo::object" name="object">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
    <argument id="cJSONUtils_FindPointerFromObjectTo::target" name="target">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
  </function>
  <function id="cJSONUtils_GenerateMergePatch" name="cJSONUtils_GenerateMergePatch">
    <brief>target will be modified by patch. return value is new ptr for target.</brief>
    <return>
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </return>
    <argument id="cJSONUtils_GenerateMergePatch::from" name="from">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
    <argument id="cJSONUtils_GenerateMergePatch::to" name="to">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
  </function>
  <function id="cJSONUtils_GeneratePatches" name="cJSONUtils_GeneratePatches">
    <brief>Implement RFC6902 (https://tools.ietf.org/html/rfc6902) JSON Patch spec.</brief>
    <return>
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </return>
    <argument id="cJSONUtils_GeneratePatches::from" name="from">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
    <argument id="cJSONUtils_GeneratePatches::to" name="to">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
  </function>
  <function id="cJSONUtils_GetPointer" name="cJSONUtils_GetPointer">
    <brief>Implement RFC6901 (https://tools.ietf.org/html/rfc6901) JSON Pointer spec.</brief>
    <return>
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </return>
    <argument id="cJSONUtils_GetPointer::object" name="object">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
    <argument id="cJSONUtils_GetPointer::pointer" name="pointer">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
  </function>
  <function id="cJSONUtils_MergePatch" name="cJSONUtils_MergePatch">
    <brief>Implement RFC7386 (https://tools.ietf.org/html/rfc7396) JSON Merge Patch spec.</brief>
    <return>
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </return>
    <argument id="cJSONUtils_MergePatch::target" name="target">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
    <argument id="cJSONUtils_MergePatch::patch" name="patch">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
  </function>
  <function id="cJSONUtils_SortObject" name="cJSONUtils_SortObject">
    <brief>Given a root object and a target object, construct a pointer from one to the other.</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cJSONUtils_SortObject::object" name="object">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
  </function>
  <function id="file_to_json" name="file_to_json">
    <brief>*</brief>
    <return>
      <doc>Success or not.</doc>
      <type builtin="yes" name="int" />
    </return>
    <argument id="file_to_json::fname" name="fname">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
    <argument id="file_to_json::outJson" name="outJson">
      <type name="cJSON" qualifier="**" ref="cJSON#cJSON" />
    </argument>
  </function>
  <function id="json_get_char" name="json_get_char">
    <brief>*</brief>
    <return>
      <doc>Char string.</doc>
      <type builtin="yes" name="char" qualifier="*" />
    </return>
    <argument id="json_get_char::inJson" name="inJson">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
    <argument id="json_get_char::key" name="key">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
  </function>
  <function id="json_get_int" name="json_get_int">
    <brief>*</brief>
    <return>
      <doc>Integer.</doc>
      <type builtin="yes" name="int" />
    </return>
    <argument id="json_get_int::inJson" name="inJson">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
    <argument id="json_get_int::key" name="key">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
  </function>
  <function id="json_release" name="json_release">
    <brief>*</brief>
    <return>
      <doc>Void.</doc>
      <type builtin="yes" name="void" />
    </return>
    <argument id="json_release::inJson" name="inJson">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
  </function>
  <function id="json_to_file" name="json_to_file">
    <brief>*</brief>
    <return>
      <doc>Success or not.</doc>
      <type builtin="yes" name="int" />
    </return>
    <argument id="json_to_file::fname" name="fname">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
    <argument id="json_to_file::inJson" name="inJson">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
  </function>
  <function id="mbtcp_cmd_hanlder" name="mbtcp_cmd_hanlder">
    <brief>*</brief>
    <return>
      <doc>Modbus response string in JSON format.</doc>
      <type builtin="yes" name="char" qualifier="*" />
    </return>
    <argument id="mbtcp_cmd_hanlder::req" name="req">
      <type name="cJSON" qualifier="*" ref="cJSON#cJSON" />
    </argument>
    <argument id="mbtcp_cmd_hanlder::fc" name="fc">
      <type name="mbtcp_fc" ref="index#mbtcp_fc" />
    </argument>
  </function>
  <function id="mbtcp_list_handles" name="mbtcp_list_handles">
    <brief>*</brief>
    <return>
      <doc>Void.</doc>
      <type builtin="yes" name="void" />
    </return>
  </function>
  <function id="set_modbus_error_resp" name="set_modbus_error_resp">
    <brief>*</brief>
    <return>
      <doc>Modbus response string in JSON format.</doc>
      <type builtin="yes" name="char" qualifier="*" />
    </return>
    <argument id="set_modbus_error_resp::tid" name="tid">
      <type builtin="yes" name="int" />
    </argument>
    <argument id="set_modbus_error_resp::reason" name="reason">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
  </function>
  <report name="Documentation generator" ref="report" />
</index>
