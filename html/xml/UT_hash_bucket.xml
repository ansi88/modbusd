<?xml version='1.0' encoding='utf-8'?>
<struct id="UT_hash_bucket" name="UT_hash_bucket" typedef="yes" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <field id="UT_hash_bucket::hh_head" name="hh_head">
    <type name="UT_hash_handle" qualifier="*" ref="UT_hash_handle#UT_hash_handle" />
  </field>
  <field id="UT_hash_bucket::count" name="count">
    <type builtin="yes" name="unsigned int" />
  </field>
  <field id="UT_hash_bucket::expand_mult" name="expand_mult">
    <brief> expand_mult is normally set to 0. In this situation, the max chain length</brief>
    <doc>threshold is enforced at its default value, HASH_BKT_CAPACITY_THRESH. (If
the bucket's chain exceeds this length, bucket expansion is triggered).
However, setting expand_mult to a non-zero value delays bucket expansion
(that would be triggered by additions to this particular bucket)
until its chain length reaches a *multiple* of HASH_BKT_CAPACITY_THRESH.
(The multiplier is simply expand_mult+1). The whole idea of this
multiplier is to reduce bucket expansions, since they are expensive, in
situations where we know that a particular bucket tends to be overused.
It is better to let its chain length grow to a longer yet-still-bounded
value, than to do an O(n) bucket expansion too often.
</doc>
    <type builtin="yes" name="unsigned int" />
  </field>
</struct>
